generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievement_user {
  achievement_id Int
  user_id        String
  achievement    achievement @relation(fields: [achievement_id], references: [id])
  user           User        @relation(fields: [user_id], references: [id])

  @@id([achievement_id, user_id])
  @@index([user_id,achievement_id])
}

model activity {
  id          Int           @id
  name        String        @db.VarChar(255)
  interaction interaction[]
}

model buy {
  id            Int        @id
  price_at_time Int
  stock_at_time Int
  create_time   DateTime   @default(now()) @db.Timestamp(6)
  state         Boolean    @default(true)
  item_id       Int
  user_id       String
  item          item       @relation(fields: [item_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
  buy_coin      buy_coin[]

  @@index([user_id,item_id])
}

model buy_coin {
  buy_id  Int
  coin_id Int
  buy     buy  @relation(fields: [buy_id], references: [id])
  coin    coin @relation(fields: [coin_id], references: [id])

  @@id([buy_id, coin_id])
  @@index([coin_id,buy_id])
}

model click {
  idclick     String   @id @db.VarChar(255)
  create_time DateTime @default(now()) @db.Timestamp(6)
  others      String   @db.VarChar(255)
  link_id     Int
  link        link     @relation(fields: [link_id], references: [id])

  @@index([link_id])
}

model coin {
  id              Int        @id
  currency_origin Int
  state           Boolean    @default(true)
  user_id         String
  buy_coin        buy_coin[]
  user            User       @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model interaction {
  id                  Int                   @id
  create_time         DateTime              @default(now()) @db.Timestamp(6)
  activity_id         Int
  activity            activity              @relation(fields: [activity_id], references: [id], map: "fk_interaction_activity1")
  interaction_session interaction_session[]

  @@index([activity_id])
}

model interaction_session {
  interaction_id Int
  session_id     Int
  interaction    interaction @relation(fields: [interaction_id], references: [id])
  session        session     @relation(fields: [session_id], references: [id])

  @@id([interaction_id, session_id])
  @@index([session_id,interaction_id])
}

model item {
  id          Int    @id
  name        String @db.VarChar(45)
  description String @db.VarChar(45)
  cost        Int
  stock       Int
  buy         buy[]
}

model link {
  id          Int      @id
  url         String   @db.VarChar(45)
  create_time DateTime @default(now()) @db.Timestamp(6)
  user_id     String
  click       click[]
  user        User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model session {
  id                        Int                     @id @default(autoincrement())
  create_time               DateTime                @default(now()) @db.Timestamp(6)
  end_time_new_session_time Int?
  total_active_time         Unsupported("interval") @default(dbgenerated("'00:00:00'::interval"))
  user_id                   String
  interaction_session       interaction_session[]
  session                   session?                @relation("sessionTosession", fields: [end_time_new_session_time], references: [id], map: "fk_session_session1")
  other_session             session[]               @relation("sessionTosession")
  user                      User                    @relation(fields: [user_id], references: [id])

  @@index([user_id,end_time_new_session_time])
}

model Tree {
  id             Int      @id @default(autoincrement())
  move           Int
  previousMoveId Int?
  gameover       Boolean  @default(false)
  checkmate      Boolean  @default(false)
  updateTime     DateTime @default(now()) @updatedAt
  user_id        String
  user           User     @relation(fields: [user_id], references: [id])
  previousMove   Tree?    @relation("TreeMoves", fields: [previousMoveId], references: [id])
  nextMoves      Tree[]   @relation("TreeMoves")

  @@index([user_id])
}

model Job {
  id      String @id @default(uuid())
  data    Bytes
  status  String
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@index([user_id, data])
}

model User {
  id                            String             @id @default(uuid())
  username                      String             @db.VarChar(255)
  email                         String             @unique @db.VarChar(255)
  password                      String             @db.VarChar(255)
  birthday                      DateTime
  create_time                   DateTime           @default(now())
  update_time                   DateTime           @updatedAt
  achievement_user              achievement_user[]
  buy                           buy[]
  coin                          coin[]
  friend_friend_user_idTouser   friend[]           @relation("friend_user_idTouser")
  friend_friend_friend_idTouser friend[]           @relation("friend_friend_idTouser")
  link                          link[]
  location                      location[]
  session                       session[]
  Tree                          Tree[]
  Job                           Job[]
}

model location {
  id        Int     @id @default(autoincrement())
  latitude  Decimal @db.Decimal
  longitude Decimal @db.Decimal
  city      Int
  state     Int
  nation    String  @db.Char(2)
  user_id   String
  user      User    @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model friend {
  user_id                     String
  friend_id                   String
  user_friend_user_idTouser   User   @relation("friend_user_idTouser", fields: [user_id], references: [id])
  user_friend_friend_idTouser User   @relation("friend_friend_idTouser", fields: [friend_id], references: [id])

  @@id([user_id, friend_id])
  @@index([friend_id,user_id])
}

model achievement {
  id               Int                @id
  name             String             @unique() @db.VarChar(45)
  description      String             @unique() @db.VarChar(45)
  achievement_user achievement_user[]
}
